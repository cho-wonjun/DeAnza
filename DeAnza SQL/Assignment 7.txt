sqluser26
#7
Won Jun Cho
3263
3/13/2022
3/10/2022
1)
DROP TABLE RESIDENT;
DROP TABLE USER CASCADE CONSTRAINTS;
DROP TABLE COLLEGE;
DROP TABLE PAYMENT;
DROP TABLE LOCATION;
DROP TABLE DEPARTMENT CASCADE CONSTRAINTS;
DROP TABLE COURSE CASCADE CONSTRAINTS;
DROP TABLE SECTION CASCADE CONSTRAINTS;
DROP TABLE STUDENTREGISTRATION CASCADE CONSTRAINTS;
DROP VIEW CATALOG;

CREATE TABLESPACE tbsR
 DATAFILE 'tbsR_data.dbf' SIZE 10M EXTENT MANAGEMENT LOCAL UNIFORM SIZE 128K;

CREATE TABLE RESIDENT (
ID NUMBER(5) NOT NULL, 
RESINAME VARCHAR2(20),
FEESCHEDULE VARCHAR2(20),
CONSTRAINT RESIDENT_ID_PK PRIMARY KEY (ID)) TABLESPACE tbsR;

CREATE TABLESPACE tbsU
 DATAFILE 'tbsU_data.dbf' SIZE 500K REUSE AUTOEXTEND ON NEXT 500K MAXSIZE 100M; 

CREATE TABLE USER (
ID NUMBER(5) NOT NULL CHECK (ID > 100000),
FIRSTNAME VARCHAR2(10),
LASTNAME VARCHAR2(10),
ADDRESS VARCHAR2(20),
EMAIL VARCHAR2(20),
TELNO NUMBER(10),
RESIDENTID NUMBER(5) NOT NULL, 
TYPE NUMBER(1), 
CONSTRAINT USER_ID_PK PRIMARY KEY(ID), 
CONSTRAINT USER_RESIDENTID_FK FOREIGN KEY (RESIDENTID) REFERENCES
RESIDENT (ID),
CONSTRAINT USER_TYPE_UK UNIQUE(TYPE),
CONSTRAINT USER_FIRSTNAME_UK UNIQUE(FIRSTNAME), 
CONSTRAINT USER_LASTNAME)UK UNIQUE (LASTNAME)) TABLESPACE tbsU
PARTITION BY RANGE (ID) (
 PARTITION USER_ID_r1 VALUE LESS THAN (10000),
 PARTITION USER_ID_r2 VALUE LESS THAN (20000),
 PARTITION USER_ID_r3 VALUE LESS THAN (30000),
 PARTITION USER_ID_r4 VALUE LESS THAN (40000),
 PARTITION USER_ID_r5 VALUE LESS THAN (50000),
 PARTITION USER_ID_r6 VALUE LESS THAN (60000),
 PARTITION USER_ID_r7 VALUE LESS THAN (70000),
 PARTITION USER_ID_r8 VALUE LESS THAN (80000),
 PARTITION USER_ID_r9 VALUE LESS THAN (MAXVALUE),
);

CREATE TABLESPACE tbsC
 DATAFILE 'tbsC_data.dbf' SIZE 20M DEFAULT STORAGE (INITIAL 128K NEXT 128K MINEXTENTS 1 MAXEXTENTS 999) ONLINE; 

CREATE TABLE COLLEGE (
ID NUMBER(5) NOT NULL,
NAME VARCHAR2(20),
ADDRESS VARCHAR2(20),
TELNO NUMBER(10),
CONSTRAINT COLLEGE_ID_PK PRIMARY KEY(ID),
CONSTRAINT COLLEGE_NAME_UK UNIQUE(NAME),
CONSTRAINT COLLEGE_ADDRESS_UK UNISQUE(ADDRESS),
CONSTRAINT COLLEGE_TELNO_UK UNIQUE(TELNO)) TABLESPACE tbsC;

CREATE TABLESPACE tbsP
 DATAFILE 'tbsP_data.dbf' SIZE 20M DEFAULT STORAGE (INITIAL 128K NEXT 128K MINEXTENTS 1 MAXEXTENTS 999) ONLINE; 

CREATE TABLE PAYMENT (
ID NUMBER(5) NOT NULL,
PAYMENTNAME VARCHAR2(5), 
CONSTRAINT PAYMENT_ID_PK PRIMARY KEY(ID)) TABLESPACE tbsP;

CREATE TABLESPACE tbsL
 DATAFILE 'tbsL_data.dbf' SIZE 20M DEFAULT STORAGE (INITIAL 128K NEXT 128K MINEXTENTS 1 MAXEXTENTS 999) ONLINE; 


CREATE TABLE LOCATION (
ID NUMBER(5) NOT NULL, 
LOCATIONNAME VARCHAR2(20),
CONSTRAINT LOCATION_ID_PK PRIMARY KEY(ID)) TABLESPACE tbsL;

CREATE TABLESPACE tbsD
 DATAFILE 'tbsD_data.dbf' SIZE 500K REUSE AUTOEXTEND ON NEXT 500K MAXSIZE 100M; 

CREATE TABLE DEPARTMENT (
ID NUMBER(5) NOT NULL, 
NAME VARCHAR2(10), 
LOCID NUMBER(5) NOT NULL, 
COLLEGEID NUMBER(5) NOT NULL, 
CONSTRAINT DEPARTMENT_ID_PK PRIMARY KEY(ID),
CONSTRAINT DEPARTMENT_NAME_UK UNIQUE(NAME),
CONSTRAINT DEPARTMENT_LOCID_FK FOREIGN KEY(LOCID) REFERENCES LOCATION (ID),
CONSTRAINT DEPARTMENT_COLLEGEID_FK FOREIGN KEY(COLLEGEID) REFERENCES COLLEGE(ID)) TABLESPACE tbsD;

CREATE TABLESPACE tbsCO
 DATAFILE 'tbsCO_data.dbf' SIZE 500K REUSE AUTOEXTEND ON NEXT 500K MAXSIZE 100M; 

CREATE TABLE COURSE (
ID NUMBER(5) NOT NULL, 
COURSENO NUMBER(5),
COURSENAME VARCHAR2(20),
PREQ VARCHAR2(20) CONSTRAINT COURSE_SELF_KEY REFERENCES COURSE (COURSENAME),
DEPTID NUMBER(5) NOT NULL, 
CONSTRAINT COURSE_ID_PK PRIMARY KEY(ID), 
CONSTRAINT COURSE_DEPTID_FK FOREIGN KEY(DEPTID) REFERENCES DEPARTMENT (ID)) TABLESPACE tbsCO;

CREATE TABLESPACE tbsSE
 DATAFILE 'tbsSE_data.dbf' SIZE 500K REUSE AUTOEXTEND ON NEXT 500K MAXSIZE 100M; 

CREATE TABLE SECTION (
ID NUMBER(5) NOT NULL,
SECTIONNO NUMBER(5),
COURSEID NUMBER(5) NOT NULL, 
LOCATIONID NUMBER(5) NOT NULL, 
STARTTIME DATE, 
ENDTIME DATE,
STARTDATE DATE,
ENDDATE DATE,
USERID NUMBER(5) NOT NULL, 
CONSTRAINT SECTION_ID_PK PRIMARY KEY(ID),
CONSTRAINT SECTION_COURSEID_FK FOREIGN KEY(COURSEID) REFERENCES COURSE(ID),
CONSTRAINT SECTION_LOCATIONID_FK FOREIGN KEY(LOCATIONID) REFERENCES LOCATION(ID),
CONSTRAINT SECTION_USERID_FK FOREIGN KEY(USERID) REFERENCES USER(ID)) TABLESPACE tbsSE;

CREATE TABLESPACE tbsS
 DATAFILE 'tbsU_data.dbf' SIZE 500K REUSE AUTOEXTEND ON NEXT 500K MAXSIZE 100M; 

CREATE TABLE STUDENTREGISTRATION (
ID NUMBER(5) NOT NULL, 
STUDENTID NUMBER(5) NOT NULL,
SECTIONID NUMBER(5) NOT NULL, 
FEESTATUS VARCHAR2(5), 
PAYMENTID NUMBER(5) NOT NULL,
CONSTRAINT STUDENTREGISTRATION_ID_PK PRIMARY KEY(ID), 
CONSTRAINT STUDENTREGISTRATION_STUDENTID_FK FOREIGN KEY(STUDENTID) REFERENCES USER(ID),
CONSTRAINT STUDENTREGISTRATION_SECTIONID_FK FOREIGN KEY(SECTIONID) REFERENCES SECTION(ID),
CONSTRAINT STUDENTREGISTRATION_PAYMENTID_FK FOREIGN KEY(PAYMENTID) REFERENCES PAYMENT(ID)) TABLESPACE tbsS
PARTITION BY HASH (ID) PARTITIONS 10;

CREATE VIEW CATALOG AS
SELECT D.ID, C.ID, S.ID, L.ID
FROM DEPARTMENT D, COURSE C, SECTION S, LOCATION L
WHERE D.ID = C.DEPTID AND C.ID = S.COURSEID AND L.ID = S.LOCATIONID; 

2)
Student Registration and User will increase quickly. Student Registration will implement hash partition, while User will implement range partition. Because the point of Student Registration table is to quickly give out information about what this particular one student, hash partition will be helpful, as it is good for selecting one or two value quickly from big database. Also, Student Registration table can have multiple fees whose id's are not always organized in an easily ordered, numerical manner. Since User table is always organized in an easily ordered, numerical manner, it will be best to apply partition by range. 